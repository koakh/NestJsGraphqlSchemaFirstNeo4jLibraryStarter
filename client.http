### ------------------------------------------------------------------------
### variables
### ------------------------------------------------------------------------
@host = 127.0.0.1
@port = 3443
@baseUri = https://{{host}}:{{port}}
@gqlUri = {{baseUri}}/graphql
@contentType = application/json
@requestType = GraphQL

@userLoginUsername = admin
@userLoginPassword = 12345678
@userIdAdmin = efeed3eb-c0a2-4b3e-816f-2a42ca8451b3
@userIdJohnDoe = 520c2eb5-e83b-4ef5-a343-85756bcce149
@userLoginJohnDoe = johndoe
@authToken = {{userLogin.response.body.$.data.userLogin.accessToken}}

### ------------------------------------------------------------------------
### NEW authentication with neo4j and without userService
### ------------------------------------------------------------------------

### mutation: signUp
// @name signUp
POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}

mutation signUp($signUpInput: SignUpInput!) {
	signUp(signUpInput: $signUpInput)
}

{
	"signUpInput": {
		"username": "kapa",
		"password": "12345678",
		"firstName": "Mário",
		"lastName": "Monteiro",
		"email": "mail@koakh.com",
		"metaData": {
			"key": "new user registered"
		}
	}
}

### mutation: signUp
// @name signUp
POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}

mutation signIn($signInInput: SignInInput!) {
	signIn(signInInput: $signInInput)
}

{
	"signInInput": {
		"username": "kapa",
		"password": "12345678"
	}
}

### ------------------------------------------------------------------------
### authentication
### bellow is copied from
### links-laptop;/home/mario/Development/Neo4j/NestJsGraphqlSchemaFirstNeo4jLibraryStarter/client.http
### ------------------------------------------------------------------------

### mutation: userLogin
// @name userLogin
POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}

mutation userLogin($loginUserData: LoginUserInput!) {
	userLogin(loginUserData: $loginUserData) {
		accessToken
		user {
			id
			username
			email
			roles
		}
	}
}

{
	"loginUserData": {
		"username": "{{userLoginUsername}}",
		"password": "{{userLoginPassword}}"
	}
}

### mutation: userLogout
// @name userLogout
POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

mutation userLogout {
	userLogout
}

### authRefreshToken
// @name authRefreshToken
// when refresh token always sent new authTokens
// authToken and refreshToken (cookie)
// it will fail after we logout or increase version with authRevokeRefreshToken,
// the version of inMemory doesn't match the version of refresh token
// requires configure cookie middleware in AuthModules `configure(consumer: MiddlewareConsumer)`

POST {{baseUri}}/refresh-token HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}


### mutation: revokeUserRefreshTokens
// @name revokeUserRefreshTokens
POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

mutation revokeUserRefreshTokens($username: String!) {
	revokeUserRefreshTokens(username: $username)
}

{
	"username": "{{userLoginUsername}}"
}

### mutation: userProfile
// @name userProfile
POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

query userProfile{
  userProfile {
    id
    username
    firstName
    lastName
    email
    roles
    createdDate
    metaData
	}
}

### query: users
// @name users

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

query users{
  users{
    id
    username
    firstName
    lastName
    email
    roles
    createdDate
    metaData
  }
}

### query: userById
// @name userById

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

query userById($id: String!) {
  userById(id: $id) {
    id
    username
    firstName
    lastName
    email
    roles
    createdDate
    metaData
  }
}

{
	"id": "{{userIdAdmin}}"
}

### query: userByUsername
// @name userByUsername

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

query userByUsername($username: String!) {
  userByUsername(username: $username) {
    id
    username
    firstName
    lastName
    email
    roles
    createdDate
    metaData
  }
}

{
	"username": "{{userLoginJohnDoe}}"
}

### query: userRegister
// @name userRegister

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

mutation userRegister($newUserData: NewUserInput!){
  userRegister(newUserData: $newUserData) {
    id
    username
    firstName
    lastName
    email
    roles
    createdDate
    metaData
  }
}

{
	"newUserData": {
		"username": "koakh",
		"password": "12345678",
		"firstName": "Mário",
		"lastName": "Monteiro",
		"email": "mail@koakh.com",
		"metaData": {
			"key": "new user registered"
		}
	}
}

### mutations update: userUpdate

// @name userUpdate
// neo4j: MATCH (n:User {id:"4ea88521-031b-4279-9165-9c10e1839002"}) RETURN n.roles, n.metaDataInternal

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

mutation userUpdate($updateUserData: UpdateUserInput!) {
  userUpdate(updateUserData: $updateUserData) {
    id
    username
    firstName
    lastName
    email
    roles
    createdDate
    metaData
  }
}

{
	"updateUserData": {
		"id": "{{userIdJohnDoe}}",
		"email": "another@koakh.com",
		"metaData": {
			"key": "valueUpdatedAgain"
		}
	}
}

### mutations update: userUpdatePassword

// @name userUpdatePassword
// neo4j:

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

mutation userUpdatePassword($updateUserPasswordData: UpdateUserPasswordInput!) {
  userUpdatePassword(updateUserPasswordData: $updateUserPasswordData) {
    id
    username
    firstName
    lastName
    email
    roles
    createdDate
    metaData
  }
}

{
	"updateUserPasswordData": {
		"id": "{{userIdAdmin}}",
		"password": "87654321"
	}
}

### mutations update: userUpdateProfile

// @name userUpdateProfile
// neo4j:  MATCH (n:User {id:"b2756e4d-0b69-49cd-a446-64c884e01f9e"}) RETURN n.id,n.email,n.mobilePhone,n.postal,n.city,n.region,n.geoLocation,n.timezone,n.useralInfo,n.metaData

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

mutation userUpdateProfile($updateUserProfileData: UpdateUserProfileInput!) {
  userUpdateProfile(updateUserProfileData: $updateUserProfileData) {
    id
    username
    firstName
    lastName
    email
    roles
    createdDate
    metaData
  }
}

{
	"updateUserProfileData": {
		"email": "profileupdated@example.com",
		"metaData": {
			"key": "metaDataUpdated on profile"
		}
	}
}

### subscriptions to be used in graphql playground, or other subscriptions ready client

subscription userLogged{
  userLogged
}

subscription userAdded {
  userAdded {
    id
  }
}

subscription userUpdated {
  userUpdated {
    id
  }
}

subscription userPasswordUpdated {
  userPasswordUpdated {
    id
  }
}

subscription userProfileUpdated {
  userProfileUpdated {
    id
  }
}

### ------------------------------------------------------------------------
### neo4j dataModel
### bellow is copied from
### koakh-laptop;/home/mario/Development/Neo4j/BuildingGraphQLAPIsUsingTheNeo4jGraphQLLibrary/client.http
### MATCH (n) DETACH DELETE n
### ------------------------------------------------------------------------

### seedDatabaseCreateBooks
// @name seedDatabaseCreateBooks

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

mutation {
  createBooks(
    input: [
      {
        isbn: "1492047686"
        title: "Graph Algorithms"
        price: 37.48
        description: "Practical Examples in Apache Spark and Neo4j"
        subjects: {
          create: [
            { node: { name: "Graph theory" } }
            { node: { name: "Neo4j" } }
          ]
        }
        authors: {
          create: [
            { node: { name: "Mark Needham" } }
            { node: { name: "Amy E. Hodler" } }
          ]
        }
      }
      {
        isbn: "1119387507"
        title: "Inspired"
        price: 21.38
        description: "How to Create Tech Products Customers Love"
        subjects: {
          create: [
            { node: { name: "Product management" } }
            { node: { name: "Design" } }
          ]
        }
        authors: { create: { node: { name: "Marty Cagan" } } }
      }
      {
        isbn: "190962151X"
        title: "Ross Poldark"
        price: 15.52
        description: "Ross Poldark is the first novel in Winston Graham's sweeping saga of Cornish life in the eighteenth century."
        subjects: {
          create: [
            { node: { name: "Historical fiction" } }
            { node: { name: "Cornwall" } }
          ]
        }
        authors: { create: { node: { name: "Winston Graham" } } }
      }
    ]
  ) {
    books {
      title
      subjects {
        name
      }
      authors {
        name
      }
    }
  }
}

### seedDatabaseCreateCustomers
// @name seedDatabaseCreateCustomers

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

mutation {
  createCustomers(
    input: [
      {
        username: "EmilEifrem7474"
        reviews: {
          create: {
            node: {
              rating: 5
              text: "Best overview of graph data science!"
              book: { connect: { where: { node: { isbn: "1492047686" } } } }
            }
          }
        }
        orders: {
          create: {
            node: {
              books: {
                connect: { where: { node: { title: "Graph Algorithms" } } }
              }
              shipTo: {
                create: {
                  node: {
                    address: "111 E 5th Ave, San Mateo, CA 94401"
                    location: {
                      latitude: 37.5635980790
                      longitude: -122.322243272725
                    }
                  }
                }
              }
            }
          }
        }
      }
      {
        username: "BookLover123"
        reviews: {
          create: [
            {
              node: {
                rating: 4
                text: "Beautiful depiction of Cornwall."
                book: { connect: { where: { node: { isbn: "190962151X" } } } }
              }
            }
          ]
        }
        orders: {
          create: {
            node: {
              books: {
                connect: [
                  { where: { node: { title: "Ross Poldark" } } }
                  { where: { node: { isbn: "1119387507" } } }
                  { where: { node: { isbn: "1492047686" } } }
                ]
              }
              shipTo: {
                create: {
                  node: {
                    address: "Nordenskiöldsgatan 24, 211 19 Malmö, Sweden"
                    location: {
                      latitude: 55.6122270502
                      longitude: 12.99481772774
                    }
                  }
                }
              }
            }
          }
        }
      }
    ]
  ) {
    customers {
      username
    }
  }
}

### booksWherePriceLess
// @name booksWherePriceLess

POST {{gqlUri}}
X-REQUEST-TYPE: GraphQL
Content-Type: {{contentType}}
// Authorization: Bearer {{authToken}}

query ($price: Float!) {
  books(where: { price_LT: $price }) {
    title
    price
  }
}

{
  "price": 20.00
}

### createAuthors
// @name createAuthors

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
// Authorization: Bearer {{authToken}}

mutation {
  createAuthors(
    input: [
      {
        name: "Marty Cagan"
        books: { connect: { where: { node: { title: "Inspired" } } } }
      }
      {
        name: "Winston Graham"
        books: { connect: { where: { node: { title: "Ross Poldark" } } } }
      }
      {
        name: "Mark Needham"
        books: { connect: { where: { node: { title: "Graph Algorithms" } } } }
      }
      {
        name: "Amy E. Hodler"
        books: { connect: { where: { node: { title: "Graph Algorithms" } } } }
      }
    ]
  ) {
    authors {
      name
      books {
        title
      }
    }
  }
}

### updateBooksWithCreateSubjects
// @name updateBooksWithCreateSubjects
// There are a few different ways to approach this one, let's see how we can accomplish this using the `updateBooks` mutation:

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

mutation {
  # inspired
  inspired: updateBooks(
    where: { title: "Inspired" }
    create: {
      subjects: [
        { node: { name: "Product management" } }
        { node: { name: "Design" } }
      ]
    }
  ) {
    books {
      title
      subjects {
        name
      }
    }
  }
  # poldark
  poldark: updateBooks(
    where: { title: "Ross Poldark" }
    create: {
      subjects: [
        { node: { name: "Historical fiction" } }
        { node: { name: "Cornwall" } }
      ]
    }
  ) {
    books {
      title
      subjects {
        name
      }
    }
  }
  # algorithms
  algorithms: updateBooks(
    where: { title: "Graph Algorithms" }
    create: {
      subjects: [
        { node: { name: "Graph theory" } }
        { node: { name: "Neo4j" } }
      ]
    }
  ) {
    books {
      title
      subjects {
        name
      }
    }
  }
}

### part 2 : The Neo4j GraphQL Library

### booksCreateBooks
// @name booksCreateBooks

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

mutation {
  createBooks(
    input: {
      isbn: "1492047686"
      title: "Graph Algorithms"
      price: 37.48
      description: "Practical Examples in Apache Spark and Neo4j"
    }
  ) {
    books {
      isbn
      title
      price
      description
    }
  }
}

### booksCreateReviews
// @name booksCreateReviews

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

mutation {
  createReviews(
    input: {
      rating: 5
      text: "Best overview of graph data science!"
      book: { connect: { where: { node: { title: "Graph Algorithms" } } } }
    }
  ) {
    reviews {
      rating
      text
      createdAt
      book {
        title
      }
    }
  }
}

### customerCreateCustomers
// @name customerCreateCustomers
// We can even create more complex nested structures using this nested mutation feature of the Neo4j GraphQL Library. Here we’ll create a Customer, Order, and Address nodes and their associated relationships in this single mutation.

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

mutation {
  createCustomers(
    input: {
      username: "EmilEifrem7474"
      reviews: {
        connect: {
          where: { node: { text: "Best overview of graph data science!" } }
        }
      }
      orders: {
        create: {
          node: {
            books: {
              connect: { where: { node: { title: "Graph Algorithms" } } }
            }
            shipTo: {
              create: {
                node: {
                  address: "111 E 5th Ave, San Mateo, CA 94401"
                  location: {
                    latitude: 37.5635980790
                    longitude: -122.322243272725
                  }
                }
              }
            }
          }
        }
      }
    }
  ) {
    customers {
      username
      orders {
        placedAt
        books {
          title
        }
        shipTo {
          address
        }
      }
      reviews {
        text
        rating
        book {
          title
        }
      }
    }
  }
}

### ------------------------------------------------------------------------
### MATCH (n) DETACH DELETE n
### ------------------------------------------------------------------------

### seedPart21
// @name seedPart21
// We can even create more complex nested structures using this nested mutation feature of the Neo4j GraphQL Library. Here we’ll create a Customer, Order, and Address nodes and their associated relationships in this single mutation.

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

mutation {
  createBooks(
    input: [
      {
        isbn: "1492047686"
        title: "Graph Algorithms"
        price: 37.48
        description: "Practical Examples in Apache Spark and Neo4j"
      }
      {
        isbn: "1119387507"
        title: "Inspired"
        price: 21.38
        description: "How to Create Tech Products Customers Love"
      }
      {
        isbn: "190962151X"
        title: "Ross Poldark"
        price: 15.52
        description: "Ross Poldark is the first novel in Winston Graham's sweeping saga of Cornish life in the eighteenth century."
      }
    ]
  ) {
    books {
      title
    }
  }
}

### seedPart22

// @name seedPart22
// We can even create more complex nested structures using this nested mutation feature of the Neo4j GraphQL Library. Here we’ll create a Customer, Order, and Address nodes and their associated relationships in this single mutation.

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

mutation {
  createCustomers(
    input: [
      {
        username: "EmilEifrem7474"
        reviews: {
          create: {
          node: {
              rating: 5
              text: "Best overview of graph data science!"
              book: { connect: { where: { node: { isbn: "1492047686" } } } }
            }
          }
        }
        orders: {
          create: {
            node: {
              books: { connect: { where: { node: { title: "Graph Algorithms" } } } }
              shipTo: {
                create: {
                  node: {
                    address: "111 E 5th Ave, San Mateo, CA 94401"
                    location: {
                      latitude: 37.5635980790
                      longitude: -122.322243272725
                    }
                  }
                }
              }
            }
          }
        }
      }
      {
        username: "BookLover123"
        reviews: {
          create: [
            {
              node: {
                rating: 4
                text: "Beautiful depiction of Cornwall."
                book: { connect: { where: { node: { isbn: "190962151X" } } } }
              }
            }
          ]
        }
        orders: {
          create: {
            node: {
              books: {
                connect: [
                  { where: { node: { title: "Ross Poldark" } } }
                  { where: { node: { isbn: "1119387507" } } }
                  { where: { node: { isbn: "1492047686" } } }
                ]
              }
              shipTo: {
                create: {
                  node: {
                    address: "Nordenskiöldsgatan 24, 211 19 Malmö, Sweden"
                    location: { latitude: 55.6122270502, longitude: 12.99481772774 }
                  }
                }
              }
            }
          }
        }
      }
    ]
  ) {
    customers {
      username
    }
  }
}

### Querying Data With GraphQL

### sortingAndPagination
// @name sortingAndPagination

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

query {
  books(options: { sort: { price: DESC }, limit: 5, offset: 1 }) {
    title
    price
  }
}

### filtering
// @name filtering

POST {{gqlUri}}
X-REQUEST-TYPE: GraphQL
Content-Type: {{contentType}}
// Authorization: Bearer {{authToken}}

query {
  books(where: { price_LT: 20.00 }) {
    title
    price
  }
}

### filteringDistanceToPoint
// @name filteringDistanceToPoint

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

query {
  addresses(
    where: {
      location_LT: {
        distance: 1000
        point: { latitude: 37.56169133066, longitude: -122.3232480481 }
      }
    }
  ) {
    address
  }
}

### filteringWithNestedSelection
// @name filteringWithNestedSelection
// where argument in nested selections to filter relationships.

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

query {
  books(where: { price_LT: 20.00 }) {
    title
    price
    reviews(where: { createdAt_GT: "2021-01-01" }) {
      text
      rating
    }
  }
}

### filteringAtRootLevel
// @name filteringAtRootLevel
// filtering at the root of our query, but using a relationship

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

query {
  orders(
    where: {
      shipTo: {
        location_LT: {
          distance: 1000
          point: { latitude: 37.56169133066, longitude: -122.3232480481 }
        }
      }
    }
  ) {
    orderID
    customer {
      username
    }
    books {
      title
    }
  }
}

### ------------------------------------------------------------------------
### part 3 : Adding Custom Logic
### MATCH (n) DETACH DELETE n
### ------------------------------------------------------------------------

### seedPart31
// @name seedPart31

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

mutation {
  createBooks(
    input: [
      {
        isbn: "1492047686"
        title: "Graph Algorithms"
        price: 37.48
        description: "Practical Examples in Apache Spark and Neo4j"
        subjects: {
          create: [
            { node: { name: "Graph theory" } }
            { node: { name: "Neo4j" } }
          ]
        }
        authors: {
          create: [
            { node: { name: "Mark Needham" } }
            { node: { name: "Amy E. Hodler" } }
          ]
        }
      }
      {
        isbn: "1119387507"
        title: "Inspired"
        price: 21.38
        description: "How to Create Tech Products Customers Love"
        subjects: {
          create: [
            { node: { name: "Product management" } }
            { node: { name: "Design" } }
          ]
        }
        authors: { create: { node: { name: "Marty Cagan" } } }
      }
      {
        isbn: "190962151X"
        title: "Ross Poldark"
        price: 15.52
        description: "Ross Poldark is the first novel in Winston Graham's sweeping saga of Cornish life in the eighteenth century."
        subjects: {
          create: [
            { node: { name: "Historical fiction" } }
            { node: { name: "Cornwall" } }
          ]
        }
        authors: { create: { node: { name: "Winston Graham" } } }
      }
    ]
  ) {
    books {
      title
    }
  }
}


### seedPart32
// @name seedPart32

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

mutation {
  createCustomers(
    input: [
      {
        username: "EmilEifrem7474"
        reviews: {
          create: {
            node: {
              rating: 5
              text: "Best overview of graph data science!"
              book: { connect: { where: { node: { isbn: "1492047686" } } } }
            }
          }
        }
        orders: {
          create: {
            node: {
              books: {
                connect: { where: { node: { title: "Graph Algorithms" } } }
              }
              shipTo: {
                create: {
                  node: {
                    address: "111 E 5th Ave, San Mateo, CA 94401"
                    location: {
                      latitude: 37.5635980790
                      longitude: -122.322243272725
                    }
                  }
                }
              }
            }
          }
        }
      }
      {
        username: "BookLover123"
        reviews: {
          create: [
            {
              node: {
                rating: 4
                text: "Beautiful depiction of Cornwall."
                book: { connect: { where: { node: { isbn: "190962151X" } } } }
              }
            }
          ]
        }
        orders: {
          create: {
            node: {
              books: {
                connect: [
                  { where: { node: { title: "Ross Poldark" } } }
                  { where: { node: { isbn: "1119387507" } } }
                  { where: { node: { isbn: "1492047686" } } }
                ]
              }
              shipTo: {
                create: {
                  node: {
                    address: "Nordenskiöldsgatan 24, 211 19 Malmö, Sweden"
                    location: {
                      latitude: 55.6122270502
                      longitude: 12.99481772774
                    }
                  }
                }
              }
            }
          }
        }
      }
    ]
  ) {
    customers {
      username
    }
  }
}


### orderSubTotal
// @name orderSubTotal

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

query {
  orders {
    books {
      title
      price
    }
    subTotal
  }
}

### booksRecommendedBooks
// @name booksRecommendedBooks
// TODO: return empty array, maybe is related to logged use

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

query {
  customers {
    username
    # use defaults
    # recommended {
    recommended(limit: 3) {
      title
    }
  }
}

### ordersCurrentWeather
// @name ordersCurrentWeather
// query an external API to fetch this data using the apoc.load.json
// NOTE: long request, this will request from external weather api

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

query {
  orders {
    shipTo {
      address
      currentWeather {
        temperature
        precipitation
        windSpeed
        windDirection
        summary
      }
    }
  }
}

### booksBookSearch
// @name booksBookSearch

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
// Authorization: Bearer {{authToken}}

query {
  bookSearch(searchString: "garph") {
    title
    description
  }
}

### booksMergeBookSubjects
// @name booksMergeBookSubjects

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
// Authorization: Bearer {{authToken}}

mutation {
  mergeBookSubjects(
    subject: "Non-fiction"
    bookTitles: ["Graph Algorithms", "Inspired"]
  ) {
    name
  }
}

### ordersEstimatedDeliveryCustomResolver
// @name ordersEstimatedDeliveryCustomResolver

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

query {
  orders {
    shipTo {
      address
    }
    # custom resolver (random date)
    estimatedDelivery
  }
}

### booksSimilarBooks
// @name booksSimilarBooks
// use the Jaccard Similarity function to find similar books using book subjects:

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
// Authorization: Bearer {{authToken}}

query {
  books(where: { title: "Graph Algorithms" }) {
    title
    similar {
      title
    }
  }
}

### ordersByCustomer
// @name ordersByCustomer

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

// TODO: this one must only see it's orders, seems that the customer is null
// auth test allow customer owner
query {
  orders(where: { customer: { username: "EmilEifrem7474" } }) {
    orderID
    shippingCost
    customer {
      username
    }
  }
}

### ordersByCustomer
// @name ordersByCustomer

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}
// bind If a customer tries to create a review and connect it to a customer other than themselves the mutation will return an error. Try running this mutation using our example JWT. Does it work? Can you tell why?

mutation {
  createReviews(
    input: {
      rating: 1
      text: "Borrring"
      book: { connect: { where: { node: { title: "Ross Poldark" } } } }
      author: { connect: { where: { node: { username: "BookLover123" } } } }
    }
  ) {
    reviews {
      text
      rating
      book {
        title
      }
    }
  }
}

### ordersByCustomer
// @name ordersByCustomer

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}
// bind now with owner

mutation {
  createReviews(
    input: {
      rating: 1
      text: "Borrring"
      book: { connect: { where: { node: { title: "Ross Poldark" } } } }
      author: { connect: { where: { node: { username: "EmilEifrem7474" } } } }
    }
  ) {
    reviews {
      text
      rating
      book {
        title
      }
    }
  }
}

### ------------------------------------------------------------------------
### snippets
### ------------------------------------------------------------------------

### templateSnippet
// @name templateSnippet

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
# Authorization: Bearer {{authToken}}

query ($price: Float!) {
  books(where: { price_LT: $price }) {
    title
  }
}

{
  "price": 20.00
}
